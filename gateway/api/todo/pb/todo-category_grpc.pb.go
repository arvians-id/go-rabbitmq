// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: todo/pb/todo-category.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryTodoServiceClient is the client API for CategoryTodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryTodoServiceClient interface {
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCategoryTodoResponse, error)
	FindByID(ctx context.Context, in *GetCategoryTodoByIDRequest, opts ...grpc.CallOption) (*GetCategoryTodoResponse, error)
	Create(ctx context.Context, in *CreateCategoryTodoRequest, opts ...grpc.CallOption) (*GetCategoryTodoResponse, error)
	Delete(ctx context.Context, in *GetCategoryTodoByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoryTodoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryTodoServiceClient(cc grpc.ClientConnInterface) CategoryTodoServiceClient {
	return &categoryTodoServiceClient{cc}
}

func (c *categoryTodoServiceClient) FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCategoryTodoResponse, error) {
	out := new(ListCategoryTodoResponse)
	err := c.cc.Invoke(ctx, "/proto.CategoryTodoService/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryTodoServiceClient) FindByID(ctx context.Context, in *GetCategoryTodoByIDRequest, opts ...grpc.CallOption) (*GetCategoryTodoResponse, error) {
	out := new(GetCategoryTodoResponse)
	err := c.cc.Invoke(ctx, "/proto.CategoryTodoService/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryTodoServiceClient) Create(ctx context.Context, in *CreateCategoryTodoRequest, opts ...grpc.CallOption) (*GetCategoryTodoResponse, error) {
	out := new(GetCategoryTodoResponse)
	err := c.cc.Invoke(ctx, "/proto.CategoryTodoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryTodoServiceClient) Delete(ctx context.Context, in *GetCategoryTodoByIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.CategoryTodoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryTodoServiceServer is the server API for CategoryTodoService service.
// All implementations must embed UnimplementedCategoryTodoServiceServer
// for forward compatibility
type CategoryTodoServiceServer interface {
	FindAll(context.Context, *emptypb.Empty) (*ListCategoryTodoResponse, error)
	FindByID(context.Context, *GetCategoryTodoByIDRequest) (*GetCategoryTodoResponse, error)
	Create(context.Context, *CreateCategoryTodoRequest) (*GetCategoryTodoResponse, error)
	Delete(context.Context, *GetCategoryTodoByIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCategoryTodoServiceServer()
}

// UnimplementedCategoryTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryTodoServiceServer struct {
}

func (UnimplementedCategoryTodoServiceServer) FindAll(context.Context, *emptypb.Empty) (*ListCategoryTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedCategoryTodoServiceServer) FindByID(context.Context, *GetCategoryTodoByIDRequest) (*GetCategoryTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedCategoryTodoServiceServer) Create(context.Context, *CreateCategoryTodoRequest) (*GetCategoryTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryTodoServiceServer) Delete(context.Context, *GetCategoryTodoByIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoryTodoServiceServer) mustEmbedUnimplementedCategoryTodoServiceServer() {}

// UnsafeCategoryTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryTodoServiceServer will
// result in compilation errors.
type UnsafeCategoryTodoServiceServer interface {
	mustEmbedUnimplementedCategoryTodoServiceServer()
}

func RegisterCategoryTodoServiceServer(s grpc.ServiceRegistrar, srv CategoryTodoServiceServer) {
	s.RegisterService(&CategoryTodoService_ServiceDesc, srv)
}

func _CategoryTodoService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryTodoServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CategoryTodoService/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryTodoServiceServer).FindAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryTodoService_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryTodoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryTodoServiceServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CategoryTodoService/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryTodoServiceServer).FindByID(ctx, req.(*GetCategoryTodoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryTodoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryTodoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CategoryTodoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryTodoServiceServer).Create(ctx, req.(*CreateCategoryTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryTodoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryTodoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryTodoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CategoryTodoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryTodoServiceServer).Delete(ctx, req.(*GetCategoryTodoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryTodoService_ServiceDesc is the grpc.ServiceDesc for CategoryTodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryTodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CategoryTodoService",
	HandlerType: (*CategoryTodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _CategoryTodoService_FindAll_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _CategoryTodoService_FindByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CategoryTodoService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CategoryTodoService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo/pb/todo-category.proto",
}
